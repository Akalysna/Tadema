name: Build And Deploy
on : 
  pull_request:
    branches: main
  workflow_dispatch: 
    inputs:
      type:
        description: 'NPM Version type'
        type: string
      deploy:
        description: "Lancer le déploiement" 
        type: boolean
      package: 
        description: "Construire une image"
        type: boolean
  
jobs:

  ci: 
    if: ${{ github.event.label.name != 'release' }}
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout main branch
      uses: actions/checkout@v4
      
    - name: Install NodeJs
      uses: actions/setup-node@v4
      with: 
        node-version: 16.x

    - name: Install
      run: npm i

    - name: Test
      run: npm run test

    #- name: ES Lint
      #run: npm run lint

    - name: Build
      run: npm run build
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./build
        name: github-pages



  delivery: 
    #if: github.event.inputs.package == 'true'
    needs: ["ci", "release"]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      
    - name: Install NodeJs
      uses: actions/setup-node@v4
      with: 
        node-version: 16.x
        
    - name: Login to ghcr.io
      run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Get Latest Tag
      if: github.event.inputs.type != ''
      uses: actions-ecosystem/action-get-latest-tag@v1
      id: get-latest-tag
        
      #Récupération du SHA du commit pour nommer la version de l'image
    - name: Build and tag image
      env: 
       TAG: ${{ steps.get-latest-tag.outputs.tag }}
      run: |
        COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        REPOSITORY=${GITHUB_REPOSITORY,,}
        echo "COMMIT_SHA=$COMMIT_SHA" >> ${GITHUB_ENV}
        echo "REPOSITORY=$REPOSITORY" >> ${GITHUB_ENV}
        docker build -t ghcr.io/$REPOSITORY:$TAG .

    - name: Push image to GHCR
      run: docker push ghcr.io/${{env.REPOSITORY}}:${{ steps.get-latest-tag.outputs.tag }}



  deployment:
     if: github.event.inputs.deploy == 'true'
     needs: ci
     runs-on: ubuntu-latest
     
     permissions:
      contents: read
      pages: write
      id-token: write
      
     steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


  
  release:
    needs: ci 
    if: github.event.inputs.type != ''
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout main branch
      uses: actions/checkout@v4
      
    - name: Install NodeJs
      uses: actions/setup-node@v4
      with: 
        node-version: 18.x
        
    - name: NPM Version
      id: version
      run: | 
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        VERSION=`npm version ${{ inputs.type }}`
        echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6
      with: 
        token: ${{ secrets.GITHUB_TOKEN }}
        delete-branch: true
        title: Release ${{ steps.version.outputs.VERSION }}
        branch: release/${{ steps.version.outputs.VERSION }}
        labels: release

    - name: Merge Pull Request
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh pr merge --auto --delete-branch --squash "release/${{ steps.version.outputs.VERSION }}"
 
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
